# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "encrypt.h"} {private local
}

decl {\#include <FL/Fl_PNG_Image.H>} {selected private local
}

decl {\#include <FL/fl_ask.H>} {private local
}

decl {Fl_Text_Buffer *gpg_buf;} {private local
}

decl {Fl_Text_Buffer *message_buf;} {private local
}

data png_icon {private local filename {gpg_message.png}
}

Function {make_window()} {open C
} {
  Fl_Window win_main {
    label {GPG Message} open
    xywh {1313 428 440 490} type Double
    code0 {Fl_PNG_Image *icon = new Fl_PNG_Image(NULL, png_icon, sizeof(png_icon));}
    code1 {win_main->icon(icon);} visible
  } {
    Fl_Text_Editor gpg_key_text {
      label {GPG key:}
      xywh {5 25 430 200}
      code0 {gpg_buf = new Fl_Text_Buffer();}
      code1 {gpg_key_text->buffer(gpg_buf);}
    }
    Fl_Text_Editor message_text {
      label {Message:}
      xywh {5 245 430 200}
      code0 {message_buf = new Fl_Text_Buffer();}
      code1 {message_text->buffer(message_buf);}
    }
    Fl_Button encrypt_button {
      label Encrypt
      callback {char *gpg = gpg_buf->text();

if (strlen(gpg) == 0) {
	fl_message("Empty GPG key!");
	free(gpg);
	return;
}

char *msg = message_buf->text();
if (strlen(msg) == 0) {
	fl_message("Empty message!");
	free(msg);
	return;
}

char *out = encrypt(gpg, msg);

if (out) {
	Fl::copy(out, strlen(out), 1);
	free(out);
} else {
	fl_message("Encryption error! Check the PGP key!");
}

free(gpg);
free(msg);}
      xywh {160 450 120 30}
    }
  }
}
